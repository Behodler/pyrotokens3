/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Lachesis, LachesisInterface } from "../../testing/Lachesis";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "cut",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "bool",
        name: "valid",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "burnable",
        type: "bool",
      },
    ],
    name: "measure",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "status",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610506806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806366ce93ca14610046578063adc25c0114610062578063e2ea87db14610092575b600080fd5b610060600480360381019061005b9190610358565b6100c3565b005b61007c600480360381019061007791906103e1565b6101aa565b6040516100899190610430565b60405180910390f35b6100ac60048036038101906100a7919061044b565b6101e3565b6040516100ba929190610478565b60405180910390f35b816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060028110610115576101146104a1565b5b602091828204019190066101000a81548160ff021916908315150217905550806000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600160028110610186576101856104a1565b5b602091828204019190066101000a81548160ff021916908315150217905550505050565b600060205281600052604060002081600281106101c657600080fd5b60209182820401919006915091509054906101000a900460ff1681565b6000806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060028110610237576102366104a1565b5b602091828204019190069054906101000a900460ff166000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060016002811061029e5761029d6104a1565b5b602091828204019190069054906101000a900460ff1691509150915091565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102ed826102c2565b9050919050565b6102fd816102e2565b811461030857600080fd5b50565b60008135905061031a816102f4565b92915050565b60008115159050919050565b61033581610320565b811461034057600080fd5b50565b6000813590506103528161032c565b92915050565b600080600060608486031215610371576103706102bd565b5b600061037f8682870161030b565b935050602061039086828701610343565b92505060406103a186828701610343565b9150509250925092565b6000819050919050565b6103be816103ab565b81146103c957600080fd5b50565b6000813590506103db816103b5565b92915050565b600080604083850312156103f8576103f76102bd565b5b60006104068582860161030b565b9250506020610417858286016103cc565b9150509250929050565b61042a81610320565b82525050565b60006020820190506104456000830184610421565b92915050565b600060208284031215610461576104606102bd565b5b600061046f8482850161030b565b91505092915050565b600060408201905061048d6000830185610421565b61049a6020830184610421565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220c0c22f9d7de227a4cae5e9e557c5d69a48c789234ad17c0e3ad2694c1195681864736f6c63430008090033";

type LachesisConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LachesisConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Lachesis__factory extends ContractFactory {
  constructor(...args: LachesisConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Lachesis> {
    return super.deploy(overrides || {}) as Promise<Lachesis>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Lachesis {
    return super.attach(address) as Lachesis;
  }
  override connect(signer: Signer): Lachesis__factory {
    return super.connect(signer) as Lachesis__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LachesisInterface {
    return new utils.Interface(_abi) as LachesisInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Lachesis {
    return new Contract(address, _abi, signerOrProvider) as Lachesis;
  }
}
