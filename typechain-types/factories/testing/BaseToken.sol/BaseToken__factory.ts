/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BaseToken,
  BaseTokenInterface,
} from "../../../testing/BaseToken.sol/BaseToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_burnFee",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "value",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "burnt",
        type: "uint128",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burnFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "rebaseBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001c0d38038062001c0d83398181016040528101906200003791906200035b565b8282816003908051906020019062000051929190620000d3565b5080600490805190602001906200006a929190620000d3565b50505069d3c21bcecceda10000006002819055506002546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806005819055505050506200045a565b828054620000e19062000424565b90600052602060002090601f01602090048101928262000105576000855562000151565b82601f106200012057805160ff191683800117855562000151565b8280016001018555821562000151579182015b828111156200015057825182559160200191906001019062000133565b5b50905062000160919062000164565b5090565b5b808211156200017f57600081600090555060010162000165565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001ec82620001a1565b810181811067ffffffffffffffff821117156200020e576200020d620001b2565b5b80604052505050565b60006200022362000183565b9050620002318282620001e1565b919050565b600067ffffffffffffffff821115620002545762000253620001b2565b5b6200025f82620001a1565b9050602081019050919050565b60005b838110156200028c5780820151818401526020810190506200026f565b838111156200029c576000848401525b50505050565b6000620002b9620002b38462000236565b62000217565b905082815260208101848484011115620002d857620002d76200019c565b5b620002e58482856200026c565b509392505050565b600082601f83011262000305576200030462000197565b5b815162000317848260208601620002a2565b91505092915050565b6000819050919050565b620003358162000320565b81146200034157600080fd5b50565b60008151905062000355816200032a565b92915050565b6000806000606084860312156200037757620003766200018d565b5b600084015167ffffffffffffffff81111562000398576200039762000192565b5b620003a686828701620002ed565b935050602084015167ffffffffffffffff811115620003ca57620003c962000192565b5b620003d886828701620002ed565b9250506040620003eb8682870162000344565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200043d57607f821691505b60208210811415620004545762000453620003f5565b5b50919050565b6117a3806200046a6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806342966c681161008c57806395d89b411161006657806395d89b411461025d578063a457c2d71461027b578063a9059cbb146102ab578063dd62ed3e146102db576100ea565b806342966c68146101f557806370a082311461021157806379cc679014610241576100ea565b8063227993fc116100c8578063227993fc1461015b57806323b872dd14610177578063313ce567146101a757806339509351146101c5576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd1461013d575b600080fd5b6100f761030b565b6040516101049190610e83565b60405180910390f35b61012760048036038101906101229190610f3e565b61039d565b6040516101349190610f99565b60405180910390f35b6101456103b4565b6040516101529190610fc3565b60405180910390f35b61017560048036038101906101709190610f3e565b6103be565b005b610191600480360381019061018c9190610fde565b610430565b60405161019e9190610f99565b60405180910390f35b6101af610519565b6040516101bc919061104d565b60405180910390f35b6101df60048036038101906101da9190610f3e565b610522565b6040516101ec9190610f99565b60405180910390f35b61020f600480360381019061020a9190611068565b6105c0565b005b61022b60048036038101906102269190611095565b6105cd565b6040516102389190610fc3565b60405180910390f35b61025b60048036038101906102569190610f3e565b610615565b005b6102656106f5565b6040516102729190610e83565b60405180910390f35b61029560048036038101906102909190610f3e565b610787565b6040516102a29190610f99565b60405180910390f35b6102c560048036038101906102c09190610f3e565b610864565b6040516102d29190610f99565b60405180910390f35b6102f560048036038101906102f091906110c2565b61087b565b6040516103029190610fc3565b60405180910390f35b60606003805461031a90611131565b80601f016020809104026020016040519081016040528092919081815260200182805461034690611131565b80156103935780601f1061036857610100808354040283529160200191610393565b820191906000526020600020905b81548152906001019060200180831161037657829003601f168201915b5050505050905090565b60006103aa338484610902565b6001905092915050565b6000600254905090565b80600260008282546103d09190611192565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104259190611192565b925050819055505050565b600080600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156104f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ec9061125a565b60405180910390fd5b6105028533858403610902565b61050d858585610acd565b60019150509392505050565b60006012905090565b60006105b6338484600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105b19190611192565b610902565b6001905092915050565b6105ca3382610c28565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156106d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d0906112ec565b60405180910390fd5b6106e68333848403610902565b6106f08383610c28565b505050565b60606004805461070490611131565b80601f016020809104026020016040519081016040528092919081815260200182805461073090611131565b801561077d5780601f106107525761010080835404028352916020019161077d565b820191906000526020600020905b81548152906001019060200180831161076057829003601f168201915b5050505050905090565b600080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561084c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108439061137e565b60405180910390fd5b6108593385858403610902565b600191505092915050565b6000610871338484610acd565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610972576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096990611410565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d9906114a2565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610ac09190610fc3565b60405180910390a3505050565b60006103e860055483610ae091906114c2565b610aea919061154b565b9050816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b3a919061157c565b925050819055508082610b4d919061157c565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b9a9190611192565b925050819055508060026000828254610bb3919061157c565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fd94c96605b7cfa934c976dea75c09ddc9874e545045672180eb7be82d5c47a34846000604051610c1a929190611620565b60405180910390a350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8f906116bb565b60405180910390fd5b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610d1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d159061174d565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160026000828254610d75919061157c565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fd94c96605b7cfa934c976dea75c09ddc9874e545045672180eb7be82d5c47a34846000604051610ddd929190611620565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e24578082015181840152602081019050610e09565b83811115610e33576000848401525b50505050565b6000601f19601f8301169050919050565b6000610e5582610dea565b610e5f8185610df5565b9350610e6f818560208601610e06565b610e7881610e39565b840191505092915050565b60006020820190508181036000830152610e9d8184610e4a565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ed582610eaa565b9050919050565b610ee581610eca565b8114610ef057600080fd5b50565b600081359050610f0281610edc565b92915050565b6000819050919050565b610f1b81610f08565b8114610f2657600080fd5b50565b600081359050610f3881610f12565b92915050565b60008060408385031215610f5557610f54610ea5565b5b6000610f6385828601610ef3565b9250506020610f7485828601610f29565b9150509250929050565b60008115159050919050565b610f9381610f7e565b82525050565b6000602082019050610fae6000830184610f8a565b92915050565b610fbd81610f08565b82525050565b6000602082019050610fd86000830184610fb4565b92915050565b600080600060608486031215610ff757610ff6610ea5565b5b600061100586828701610ef3565b935050602061101686828701610ef3565b925050604061102786828701610f29565b9150509250925092565b600060ff82169050919050565b61104781611031565b82525050565b6000602082019050611062600083018461103e565b92915050565b60006020828403121561107e5761107d610ea5565b5b600061108c84828501610f29565b91505092915050565b6000602082840312156110ab576110aa610ea5565b5b60006110b984828501610ef3565b91505092915050565b600080604083850312156110d9576110d8610ea5565b5b60006110e785828601610ef3565b92505060206110f885828601610ef3565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061114957607f821691505b6020821081141561115d5761115c611102565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061119d82610f08565b91506111a883610f08565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156111dd576111dc611163565b5b828201905092915050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b6000611244602883610df5565b915061124f826111e8565b604082019050919050565b6000602082019050818103600083015261127381611237565b9050919050565b7f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f7760008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b60006112d6602483610df5565b91506112e18261127a565b604082019050919050565b60006020820190508181036000830152611305816112c9565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611368602583610df5565b91506113738261130c565b604082019050919050565b600060208201905081810360008301526113978161135b565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006113fa602483610df5565b91506114058261139e565b604082019050919050565b60006020820190508181036000830152611429816113ed565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061148c602283610df5565b915061149782611430565b604082019050919050565b600060208201905081810360008301526114bb8161147f565b9050919050565b60006114cd82610f08565b91506114d883610f08565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561151157611510611163565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061155682610f08565b915061156183610f08565b9250826115715761157061151c565b5b828204905092915050565b600061158782610f08565b915061159283610f08565b9250828210156115a5576115a4611163565b5b828203905092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6115d5816115b0565b82525050565b6000819050919050565b6000819050919050565b600061160a611605611600846115db565b6115e5565b6115b0565b9050919050565b61161a816115ef565b82525050565b600060408201905061163560008301856115cc565b6116426020830184611611565b9392505050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006116a5602183610df5565b91506116b082611649565b604082019050919050565b600060208201905081810360008301526116d481611698565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000611737602283610df5565b9150611742826116db565b604082019050919050565b600060208201905081810360008301526117668161172a565b905091905056fea26469706673582212200c0a95d3a549c3e0239fc0557ccd4079d3f946bb08897a0dba02a33a9794a26964736f6c63430008090033";

type BaseTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BaseTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BaseToken__factory extends ContractFactory {
  constructor(...args: BaseTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    _burnFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BaseToken> {
    return super.deploy(
      name_,
      symbol_,
      _burnFee,
      overrides || {}
    ) as Promise<BaseToken>;
  }
  override getDeployTransaction(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    _burnFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      _burnFee,
      overrides || {}
    );
  }
  override attach(address: string): BaseToken {
    return super.attach(address) as BaseToken;
  }
  override connect(signer: Signer): BaseToken__factory {
    return super.connect(signer) as BaseToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BaseTokenInterface {
    return new utils.Interface(_abi) as BaseTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BaseToken {
    return new Contract(address, _abi, signerOrProvider) as BaseToken;
  }
}
