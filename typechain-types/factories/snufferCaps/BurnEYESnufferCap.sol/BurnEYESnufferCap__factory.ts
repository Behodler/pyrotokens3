/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BurnEYESnufferCap,
  BurnEYESnufferCapInterface,
} from "../../../snufferCaps/BurnEYESnufferCap.sol/BurnEYESnufferCap";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "EYE",
        type: "address",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "_liquidityReceiver",
    outputs: [
      {
        internalType: "contract LiquidityReceiverLike",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pyroToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "targetContract",
        type: "address",
      },
      {
        internalType: "enum FeeExemption",
        name: "exempt",
        type: "uint8",
      },
    ],
    name: "snuff",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161096b38038061096b8339818101604052810190610032919061011f565b80806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061015f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ec826100c1565b9050919050565b6100fc816100e1565b811461010757600080fd5b50565b600081519050610119816100f3565b92915050565b60008060408385031215610136576101356100bc565b5b60006101448582860161010a565b92505060206101558582860161010a565b9150509250929050565b6107fd8061016e6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063b5f57c9a1461003b578063b768d6cd1461006b575b600080fd5b61005560048036038101906100509190610417565b610089565b6040516100629190610485565b60405180910390f35b6100736102d7565b60405161008091906104ff565b60405180910390f35b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330683635c9adc5dea000006040518463ffffffff1660e01b81526004016100f39392919061056e565b602060405180830381600087803b15801561010d57600080fd5b505af1158015610121573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014591906105d1565b610184576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017b9061065b565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016101e1919061067b565b60206040518083038186803b1580156101f957600080fd5b505afa15801561020d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023191906106c2565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68826040518263ffffffff1660e01b815260040161028e91906106fe565b600060405180830381600087803b1580156102a857600080fd5b505af11580156102bc573d6000803e3d6000fd5b505050506102cb8585856102fb565b60019150509392505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd1fcc458484846040518463ffffffff1660e01b815260040161035893929190610790565b600060405180830381600087803b15801561037257600080fd5b505af1158015610386573d6000803e3d6000fd5b50505050505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103bf82610394565b9050919050565b6103cf816103b4565b81146103da57600080fd5b50565b6000813590506103ec816103c6565b92915050565b600881106103ff57600080fd5b50565b600081359050610411816103f2565b92915050565b6000806000606084860312156104305761042f61038f565b5b600061043e868287016103dd565b935050602061044f868287016103dd565b925050604061046086828701610402565b9150509250925092565b60008115159050919050565b61047f8161046a565b82525050565b600060208201905061049a6000830184610476565b92915050565b6000819050919050565b60006104c56104c06104bb84610394565b6104a0565b610394565b9050919050565b60006104d7826104aa565b9050919050565b60006104e9826104cc565b9050919050565b6104f9816104de565b82525050565b600060208201905061051460008301846104f0565b92915050565b610523816103b4565b82525050565b6000819050919050565b6000819050919050565b600061055861055361054e84610529565b6104a0565b610533565b9050919050565b6105688161053d565b82525050565b6000606082019050610583600083018661051a565b610590602083018561051a565b61059d604083018461055f565b949350505050565b6105ae8161046a565b81146105b957600080fd5b50565b6000815190506105cb816105a5565b92915050565b6000602082840312156105e7576105e661038f565b5b60006105f5848285016105bc565b91505092915050565b600082825260208201905092915050565b7f45524332303a207472616e73666572206661696c65642e000000000000000000600082015250565b60006106456017836105fe565b91506106508261060f565b602082019050919050565b6000602082019050818103600083015261067481610638565b9050919050565b6000602082019050610690600083018461051a565b92915050565b61069f81610533565b81146106aa57600080fd5b50565b6000815190506106bc81610696565b92915050565b6000602082840312156106d8576106d761038f565b5b60006106e6848285016106ad565b91505092915050565b6106f881610533565b82525050565b600060208201905061071360008301846106ef565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6008811061075957610758610719565b5b50565b600081905061076a82610748565b919050565b600061077a8261075c565b9050919050565b61078a8161076f565b82525050565b60006060820190506107a5600083018661051a565b6107b2602083018561051a565b6107bf6040830184610781565b94935050505056fea2646970667358221220618b0629709c1256dc9f96a029250b60adc431c81ca682a407ceb8a78c5fcd6064736f6c63430008090033";

type BurnEYESnufferCapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BurnEYESnufferCapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BurnEYESnufferCap__factory extends ContractFactory {
  constructor(...args: BurnEYESnufferCapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    EYE: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BurnEYESnufferCap> {
    return super.deploy(
      EYE,
      receiver,
      overrides || {}
    ) as Promise<BurnEYESnufferCap>;
  }
  override getDeployTransaction(
    EYE: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(EYE, receiver, overrides || {});
  }
  override attach(address: string): BurnEYESnufferCap {
    return super.attach(address) as BurnEYESnufferCap;
  }
  override connect(signer: Signer): BurnEYESnufferCap__factory {
    return super.connect(signer) as BurnEYESnufferCap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BurnEYESnufferCapInterface {
    return new utils.Interface(_abi) as BurnEYESnufferCapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BurnEYESnufferCap {
    return new Contract(address, _abi, signerOrProvider) as BurnEYESnufferCap;
  }
}
