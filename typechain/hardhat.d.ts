/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IWETH10",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH10__factory>;
    getContractFactory(
      name: "LiquidityReceiverLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityReceiverLike__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "PyroTokenLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PyroTokenLike__factory>;
    getContractFactory(
      name: "SnufferCap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SnufferCap__factory>;
    getContractFactory(
      name: "LachesisLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LachesisLike__factory>;
    getContractFactory(
      name: "LiquidityReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityReceiver__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "LiquidiyReceiverLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidiyReceiverLike__factory>;
    getContractFactory(
      name: "Pyrotoken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pyrotoken__factory>;
    getContractFactory(
      name: "PyroWethProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PyroWethProxy__factory>;
    getContractFactory(
      name: "Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Burnable__factory>;
    getContractFactory(
      name: "BurnEYESnufferCap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BurnEYESnufferCap__factory>;
    getContractFactory(
      name: "LRNew",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LRNew__factory>;
    getContractFactory(
      name: "LROld",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LROld__factory>;
    getContractFactory(
      name: "Pyrotoken2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pyrotoken2__factory>;
    getContractFactory(
      name: "V2Migrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.V2Migrator__factory>;

    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IWETH10",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH10>;
    getContractAt(
      name: "LiquidityReceiverLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityReceiverLike>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "PyroTokenLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PyroTokenLike>;
    getContractAt(
      name: "SnufferCap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SnufferCap>;
    getContractAt(
      name: "LachesisLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LachesisLike>;
    getContractAt(
      name: "LiquidityReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityReceiver>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "LiquidiyReceiverLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidiyReceiverLike>;
    getContractAt(
      name: "Pyrotoken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pyrotoken>;
    getContractAt(
      name: "PyroWethProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PyroWethProxy>;
    getContractAt(
      name: "Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Burnable>;
    getContractAt(
      name: "BurnEYESnufferCap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BurnEYESnufferCap>;
    getContractAt(
      name: "LRNew",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LRNew>;
    getContractAt(
      name: "LROld",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LROld>;
    getContractAt(
      name: "Pyrotoken2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pyrotoken2>;
    getContractAt(
      name: "V2Migrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.V2Migrator>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
